{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.55f09bd1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios';\n\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 10000,\n        content: 'This note is not saved to the server',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true,\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n  \nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n  \nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return(\n        <div style={footerStyle}>\n            <br />\n            <em>Note App, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = ( props ) => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n    useEffect (() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            //id: notes.length + 1,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })                         \n      }\n    \n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll                             \n        ? notes\n        : notes.filter(note => note.important === true)\n\n    const toggleImportanceOf = (id) => {\n        const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote).then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `The note '${note.content}' was already deleted from the server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    return(\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>                                           {/* Show important */}\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all' }\n                </button>\n            </div>\n            <ul>                                            {/* Display notes list */}\n                {notesToShow.map(note =>\n                    <Note \n                        key={note.id} \n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>                       {/* addNote function as event handler */}\n                <input \n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>         {/* save button */}\n            </form>\n            <Footer />\n        </div>\n    )\n}\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport axios from 'axios'\nimport './index.css'\n\naxios\n  .get('http://localhost:3001/notes')\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}